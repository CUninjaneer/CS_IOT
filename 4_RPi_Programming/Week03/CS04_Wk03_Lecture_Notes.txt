################################################################################

# IOT Specialization
# Course 4 - Raspberry Pi Platform and Python Programming for the Raspberry Pi
# Week 3 (Module 3)
# 2019/03/24

################################################################################

# Module 3 Intro Video

################################################################################


The reason why we focus on Python over other possible languages is that it is the best supported language on RPi, especially for controlling hardware.


################################################################################

# Lecture 1.1
# Python on Raspberry Pi

################################################################################

RPi for IoT
    To use the RPi as an IoT device, you need to do some programming.
    Any language that you can get a compiler (e.g. C, C++, Java, etc.) and/or an interpreter (e.g. Java, Python, Perl, etc.) supported on your RPi OS could work.
    Python is the most convenient for RPi.
        Good programming environment built-in
        Good APIs available to access Raspberry Pi hardware

Python Language
    High-level language, easy to use
        Do not need to explicitly declare data types
        No pointers
        Object-oriented programming, classes
    Slow compared to C, C++
        Interpreted, not compiled
        Related, it's difficult to meet real time deadlines
    Two versions: Python 2.x and Python 3.x
        Python 2.x is still supported
        Programming differences are small
        We will use Python 3.x


################################################################################

# Lecture 1.2
# Python Programming Environment

################################################################################


Two Possible Environments:
    1. Integrated Development Environment
        IDLE is the best option, it's simple and convenient
        Invoke via Menu>Programming>Python, Select Python 2 or 3
    2. Text editor and interpreter, separately
        Use Pico or Nano to write a program, e.g. "test.py"
        Execute program in terminal by typing "python3 test.py"

Executing Python Code
    Two ways to do it:
        1. Interactive: execute lines typed interactively in a python console
        2. Batch: execute an entire Python program

Executing Programs from IDLE
    1. Start IDLE
    2. File > New File
    3. Type in code
    4. Select Run > Run Module
    5. Python shell will open up and code will execute


################################################################################

# Lecture 1.3
# Python Expressions

################################################################################


Algebraic Expressions
    Python shell can evaluate algebraic expressions
    Many algebraic expressions are available (i.e. min, max, etc.)

Boolean Expressions
    Comparatives (>, >=, ==, !=, <=, <)
    Evaluate to True or False

Boolean Operators
    AND, OR, NOT
    Evaluate to True or False
    Inputs are True or False as well

Variables, Assignments
    Single = for assignment
    E.g. x = 3 stores the value 3 in a variable named x


################################################################################

# Lecture 2.1
# Strings

################################################################################


Strings
    Sequence of characters enclosed in quotes (single or double quotes, doesn't matter).
    Can be assigned to a variable
    Can be manipulated using string operators and fuctions

String Operators

    Operator        Definition
    ------------    ---------------------------------------------
    x in s          (boolean) x is a substring of s
    x not in s      (boolean) x is not a substring of s
    s + t           concatenation of s and t
    s * n, n * s    concatenation of n copies of s (n is integer)
    s[i]            character at index i of s
    len(s)          (function) length of string s

Indexing Operator
    Index of an item in a sequence is its position in a sequence
    Indexing operator is [], takes an index as argument
    Indices start at 0
    Can be used to identify characters in a string

    E.g.    >>> s = 'Apple'
            >>> s[0]
            'A'
            >>> s[1]
            'p'
            >>> s[4]
            'e'
            >>>


################################################################################

# Lecture 2.2
# Functions

################################################################################


Defining Functions
    A function is a sequence of instructions associated with a function name
    Function definition starts with "def"
    Followed by function name, open/close parentheses, and colon
    Example:    >>> def test():
                        print('A test function')
                >>> test()
                A test function
                >>>

Defining/Calling Functions
    All instructions in a function definition are indented.
        IDLE does this automatically
    Function is called by typing the function name with parentheses after it
        >>> test()


################################################################################

# Lecture 2.3
# Function Arguments

################################################################################


Function Parameters/Arguments
    A function can take arguments, which are values bound to variables inside the function.
    Arguments are listed between parentheses in the function call
        >>> def circle_area(rad):
                print(3.14 * rad * rad)
        >>> circle_area(2)
        12.56

Function Return Values
    Functions can return values with the "return" instruction
    A function call is substituted for its return value in an expression
        >>> def circle_area(rad):
                return 3.14 * rad * rad
        >>> circle_area(2)
        12.56
        >>> 3 + circle_area(2)
        15.56


################################################################################

# Lecture 3.1
# Lists

################################################################################


List
    A comma-separated sequence of item enclosed in square brackets
    Items can be numbers, strings, other lists, etc.

List Operators and Functions

    Operator            Definition
    ----------          ----------
    x in lst            x is an  item of lst
    x not in lst        x is not an item of lst
    lst + lstB          concatenation of lst and lstB
    lst*n, n*lstB       concatenation of n copies of lst
    lst[i]              item at index i of lst
    len(lst)            number of items in lst
    min(lst)            minimum item in lst
    max(lst)            maximum item in lst
    sum(lst)            sum of items in lst


################################################################################

# Lecture 3.2
# List Methods

################################################################################


List Methods
    Similar to list operators, but invoked a different way.
    List operators are called on the list that they operate on.
        >>> lst = [1, 2, 3]
        >>> lst.append[8]
        >>> lst
        1, 2, 3, 8

List Methods

    Method              Definition
    -------------       ------------
    lst.appemd(item)    adds item to the end of lst
    lst.count(item)     returns the number of times that item occurs in lst
    lst.index(item)     returns index of the first occurrence of item in lst
    lst.pop()           removes and returns the last item in lst
    lst.remove(item)    removes (the first occurrence of) item from lst
    lst.reverse(item)   reverses the order of items in lst
    lst.sort(item)      sorts the items of lst in increasing order


################################################################################

# Lecture 3.3
# Control Flow

################################################################################


Control Flow
    Statements that change the order in which lines of code are executed.
        1.  IF statement
        2.  FOR loop
        3.  WHILE loop

IF statement
    if <condition>
        <indented code block>
    <non-indented statement>

IF-ELSE
    if <condition>
        <indented code block 1>
    else <condition>
        <indented code block 2>
    <non-indented statement>

FOR loop
    for <sequence>:
        <indented code block>
    <non-indented statement>

    The sequences are generally things like characters in a string, items in a list.  There are others, but this course will focus on those.

    Example:
        >>> name = 'Ian'
        >>> for letter in name:
                print(letter)
        I
        a
        n
        >>>

    Example 2:
        >>> for name in ['Jon', 'Mary', 'Pete']:
                print (name)
        Jon
        Mary
        Pete
        >>>

WHILE loop
    A while loop is different from a for loop because rather than iterating through a sequence, it executes repeatedly while a condition is true, only stopping when the condition becomes false.

    Example:
        >>> i = 0
        >>> while i < 3:
                print(i)
                i = i + 1
        0
        1
        2
        >>>


################################################################################

# Quiz
# Scratch Work

################################################################################

Problem 6

    res=[]
    def merge(a,b):
        return a+b
    for x in [1,2]:
        for y in [3,4]:
            res.append(merge(x,y))
    print(res)

    x   y   res-calc    res
    1   3   [1+3]       [4]
    1   4   [4,1+4]     [4,5]
    2   3   [4,5,2+3]   [4,5,5]
    2   4   [4,5,5,2+4] [4,5,5,6]
